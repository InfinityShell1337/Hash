(undo-tree-save-format-version . 1)
"1e0f96583e376658ae2eb6d28a43334adcdae873"
[nil nil nil nil (25577 22794 155064 366000) 0 nil]
([nil nil ((#("%?" 0 2 (wrap-prefix "" line-prefix "" fontified nil)) . -99) (101 . 101) (99 . 102) (#(":ID: 2d489473-09d9-427c-8f74-222ef9793565" 0 1 (wrap-prefix "" line-prefix "" fontified nil) 1 3 (wrap-prefix "" line-prefix "" fontified nil) 3 4 (wrap-prefix "" line-prefix "" fontified nil) 4 5 (wrap-prefix "" line-prefix "" fontified nil) 5 41 (wrap-prefix "" line-prefix "" fontified nil)) . -14) (14 . 102) (14 . 15) (1 . 20) (1 . 32) (t . -1)) nil (25577 22794 155057 813000) 0 nil])
([nil nil ((99 . 100) 99) nil (25577 22794 155046 740000) 0 nil])
([nil nil ((100 . 111)) nil (25577 22794 155041 966000) 0 nil])
([nil nil ((111 . 113)) nil (25577 22794 155037 859000) 0 nil])
([nil nil ((#("p" 0 1 (face org-level-1 wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -110) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("r" 0 1 (face org-level-1 wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -111) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#("o" 0 1 (face org-level-1 wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -112) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 113) nil (25577 22794 155030 3000) 0 nil])
([nil nil ((110 . 126)) nil (25577 22794 155006 287000) 0 nil])
([nil nil ((#("m" 0 1 (face org-level-1 wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -125) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) 126) nil (25577 22794 155000 556000) 0 nil])
([nil nil ((125 . 130)) nil (25577 22794 154947 695000) 0 nil])
([nil nil ((130 . 131)) nil (25577 22794 154944 283000) 0 nil])
([nil nil ((131 . 132)) nil (25577 22794 154941 555000) 0 nil])
([nil nil ((132 . 135)) nil (25577 22794 154938 687000) 0 nil])
([nil nil ((135 . 136)) nil (25577 22794 154935 17000) 0 nil])
([nil nil ((136 . 140)) nil (25577 22794 154931 246000) 0 nil])
([nil nil ((140 . 141)) nil (25577 22794 154927 210000) 0 nil])
([nil nil ((141 . 146)) nil (25577 22794 154916 699000) 0 nil])
([nil nil ((159 . 169) (158 . 159) (153 . 154) (#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -153) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("-" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -154) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 155 (151 . 155) (#("a" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -151) (undo-tree-id16 . -1) (undo-tree-id17 . -1) 152 (147 . 152) (#("c" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -148) (undo-tree-id18 . -1) (undo-tree-id19 . -1) 149 (148 . 149) (147 . 151) (146 . 147) (t 25577 22794 173203 201000) 141) nil (25577 22900 661667 228000) 0 nil])
([nil nil ((167 . 169) (153 . 155) (145 . 147) (138 . 140) (132 . 134) (t 25577 22900 687199 869000)) nil (25577 23119 76957 287000) 0 nil])
([nil nil ((#("e" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -169) (undo-tree-id0 . 1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (#("m" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -170) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (#("a" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -171) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (#("c" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -172) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#("s" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -173) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (#("-" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -174) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (#("l" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -175) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (#("i" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -176) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#("s" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -177) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (#("p" 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -178) (undo-tree-id19 . -1) (undo-tree-id20 . -1) 179 (179 . 234)) nil (25577 23119 76934 548000) 0 nil])
([nil nil ((232 . 251) (#("Emacs Lisp" 0 10 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -232) (232 . 242) (#("Em" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -232) (undo-tree-id0 . -2) (undo-tree-id1 . -2) 234 (232 . 234) (#("W" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -232) (undo-tree-id2 . -1) (undo-tree-id3 . -1) 233 (232 . 233) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -232) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("m" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -233) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 234 (232 . 234) (#("E" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -232) (undo-tree-id8 . -1) (#("m" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -233) (undo-tree-id9 . -1) 234 (225 . 234) (nil face org-link 224 . 225) (nil font-lock-multiline t 224 . 225) (nil fontified t 224 . 225) (nil line-prefix #("  " 0 2 (face org-indent)) 224 . 225) (nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) 224 . 225) (224 . 225) (t 25577 23119 103193 37000) 167) nil (25577 23605 472949 646000) 0 nil])
([nil nil ((nil fontified t 286 . 287) (nil line-prefix #("  " 0 2 (face org-indent)) 286 . 287) (nil wrap-prefix #("  " 0 2 (face org-indent)) 286 . 287) (nil rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) 286 . 287) (nil face org-link 286 . 287) (nil invisible org-link 286 . 287) (nil mouse-face highlight 286 . 287) (nil keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) 286 . 287) (nil help-echo "LINK: roam:Emacs Lisp" 286 . 287) (nil htmlize-link (:uri "roam:Emacs Lisp") 286 . 287) (nil font-lock-multiline t 286 . 287) (nil fontified t 285 . 286) (nil line-prefix #("  " 0 2 (face org-indent)) 285 . 286) (nil wrap-prefix #("  " 0 2 (face org-indent)) 285 . 286) (nil face org-link 285 . 286) (nil invisible org-link 285 . 286) (nil mouse-face highlight 285 . 286) (nil keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) 285 . 286) (nil help-echo "LINK: roam:Emacs Lisp" 285 . 286) (nil htmlize-link (:uri "roam:Emacs Lisp") 285 . 286) (nil font-lock-multiline t 285 . 286) (nil fontified t 284 . 285) (nil line-prefix #("  " 0 2 (face org-indent)) 284 . 285) (nil wrap-prefix #("  " 0 2 (face org-indent)) 284 . 285) (nil face org-link 284 . 285) (nil mouse-face highlight 284 . 285) (nil keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) 284 . 285) (nil help-echo "LINK: roam:Emacs Lisp" 284 . 285) (nil htmlize-link (:uri "roam:Emacs Lisp") 284 . 285) (nil font-lock-multiline t 284 . 285) (nil rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) 284 . 285) (nil fontified t 275 . 284) (nil line-prefix #("  " 0 2 (face org-indent)) 275 . 284) (nil wrap-prefix #("  " 0 2 (face org-indent)) 275 . 284) (nil face org-link 275 . 284) (nil mouse-face highlight 275 . 284) (nil keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) 275 . 284) (nil help-echo "LINK: roam:Emacs Lisp" 275 . 284) (nil htmlize-link (:uri "roam:Emacs Lisp") 275 . 284) (nil font-lock-multiline t 275 . 284) (nil fontified t 270 . 275) (nil line-prefix #("  " 0 2 (face org-indent)) 270 . 275) (nil wrap-prefix #("  " 0 2 (face org-indent)) 270 . 275) (nil face org-link 270 . 275) (nil mouse-face highlight 270 . 275) (nil keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) 270 . 275) (nil help-echo "LINK: roam:Emacs Lisp" 270 . 275) (nil htmlize-link (:uri "roam:Emacs Lisp") 270 . 275) (nil font-lock-multiline t 270 . 275) (nil fontified t 269 . 270) (nil line-prefix #("  " 0 2 (face org-indent)) 269 . 270) (nil wrap-prefix #("  " 0 2 (face org-indent)) 269 . 270) (nil invisible org-link 269 . 270) (nil mouse-face highlight 269 . 270) (nil keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) 269 . 270) (nil help-echo "LINK: roam:Emacs Lisp" 269 . 270) (nil htmlize-link (:uri "roam:Emacs Lisp") 269 . 270) (nil font-lock-multiline t 269 . 270) (nil face org-link 269 . 270) (nil rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) 269 . 270) (nil fontified t 268 . 269) (nil line-prefix #("  " 0 2 (face org-indent)) 268 . 269) (nil wrap-prefix #("  " 0 2 (face org-indent)) 268 . 269) (nil invisible org-link 268 . 269) (nil mouse-face highlight 268 . 269) (nil keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) 268 . 269) (nil help-echo "LINK: roam:Emacs Lisp" 268 . 269) (nil htmlize-link (:uri "roam:Emacs Lisp") 268 . 269) (nil font-lock-multiline t 268 . 269) (nil face org-link 268 . 269) (#("[[roam:Emacs Lisp]]" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: roam:Emacs Lisp" htmlize-link (:uri "roam:Emacs Lisp") font-lock-multiline t face org-link) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: roam:Emacs Lisp" htmlize-link (:uri "roam:Emacs Lisp") font-lock-multiline t face org-link rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 2 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: roam:Emacs Lisp" htmlize-link (:uri "roam:Emacs Lisp") font-lock-multiline t) 7 16 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: roam:Emacs Lisp" htmlize-link (:uri "roam:Emacs Lisp") font-lock-multiline t) 16 17 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: roam:Emacs Lisp" htmlize-link (:uri "roam:Emacs Lisp") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 17 18 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-link invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: roam:Emacs Lisp" htmlize-link (:uri "roam:Emacs Lisp") font-lock-multiline t) 18 19 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face org-link invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: roam:Emacs Lisp" htmlize-link (:uri "roam:Emacs Lisp") font-lock-multiline t)) . 232) (251 . 306)) nil (25577 23605 472844 147000) 0 nil])
([nil nil ((#("I like [[id:cfe021f6-198a-4975-b0d3-7b9fd5697fde][Emacs Lisp]]
" 0 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20230212162238-programming_languages") 7 49 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20230212162238-programming_languages" invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: id:cfe021f6-198a-4975-b0d3-7b9fd5697fde" htmlize-link (:uri "id:cfe021f6-198a-4975-b0d3-7b9fd5697fde") font-lock-multiline t face org-link) 49 50 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20230212162238-programming_languages" invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: id:cfe021f6-198a-4975-b0d3-7b9fd5697fde" htmlize-link (:uri "id:cfe021f6-198a-4975-b0d3-7b9fd5697fde") font-lock-multiline t face org-link rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 50 59 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20230212162238-programming_languages" face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: id:cfe021f6-198a-4975-b0d3-7b9fd5697fde" htmlize-link (:uri "id:cfe021f6-198a-4975-b0d3-7b9fd5697fde") font-lock-multiline t) 59 60 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20230212162238-programming_languages" face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: id:cfe021f6-198a-4975-b0d3-7b9fd5697fde" htmlize-link (:uri "id:cfe021f6-198a-4975-b0d3-7b9fd5697fde") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 60 61 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20230212162238-programming_languages" face org-link invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: id:cfe021f6-198a-4975-b0d3-7b9fd5697fde" htmlize-link (:uri "id:cfe021f6-198a-4975-b0d3-7b9fd5697fde") font-lock-multiline t) 61 62 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20230212162238-programming_languages" rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face org-link invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: id:cfe021f6-198a-4975-b0d3-7b9fd5697fde" htmlize-link (:uri "id:cfe021f6-198a-4975-b0d3-7b9fd5697fde") font-lock-multiline t) 62 63 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20230212162238-programming_languages")) . 225) (undo-tree-id10 . 1) (undo-tree-id11 . -7) (undo-tree-id12 . -7) (undo-tree-id13 . -63) (undo-tree-id14 . -62) (undo-tree-id15 . -7) (undo-tree-id16 . -7) (undo-tree-id17 . -7) (undo-tree-id18 . -7) (undo-tree-id19 . -7) (undo-tree-id20 . -7) (undo-tree-id21 . -7) (undo-tree-id22 . 56) (undo-tree-id23 . -8) (undo-tree-id24 . 2) (undo-tree-id25 . -62) (undo-tree-id26 . -7) (undo-tree-id27 . -7) (undo-tree-id28 . -7) (undo-tree-id29 . -7) (undo-tree-id30 . -63) (undo-tree-id31 . -7) (undo-tree-id32 . -7) (undo-tree-id33 . -7) (undo-tree-id34 . -7) (undo-tree-id35 . -7) (undo-tree-id36 . -7) (undo-tree-id37 . -7) (undo-tree-id38 . -7) (undo-tree-id39 . -7) (undo-tree-id40 . -7) (undo-tree-id41 . -7) (undo-tree-id42 . -7) (undo-tree-id43 . -63) 232 (t 25577 23605 489177 823000)) nil (25577 23610 244469 871000) 0 nil])
([nil current ((134 . 182) (#("A" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) org-category "20230212162238-programming_languages")) . -134) (undo-tree-id44 . -1) (#("W" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) org-category "20230212162238-programming_languages")) . -135) (undo-tree-id45 . -1) 136 (134 . 136) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) org-category "20230212162238-programming_languages")) . -134) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) org-category "20230212162238-programming_languages")) . -135) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#("k" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) org-category "20230212162238-programming_languages")) . -136) (undo-tree-id50 . -1) (undo-tree-id51 . -1) 137 (140 . 189) (#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) org-category "20230212162238-programming_languages")) . -140) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("u" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) org-category "20230212162238-programming_languages")) . -141) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) org-category "20230212162238-programming_languages")) . -142) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) org-category "20230212162238-programming_languages")) . -143) (undo-tree-id58 . -1) (undo-tree-id59 . -1) 144 (147 . 197) (#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) org-category "20230212162238-programming_languages")) . -147) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) 148 (#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) org-category "20230212162238-programming_languages")) . -148) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) org-category "20230212162238-programming_languages")) . -149) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (#("l" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) org-category "20230212162238-programming_languages")) . -150) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#("l" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) org-category "20230212162238-programming_languages")) . -151) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) 152 (155 . 211) (#("c" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) org-category "20230212162238-programming_languages")) . -155) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) org-category "20230212162238-programming_languages")) . -156) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (#("m" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) org-category "20230212162238-programming_languages")) . -157) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("m" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) org-category "20230212162238-programming_languages")) . -158) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) org-category "20230212162238-programming_languages")) . -159) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) org-category "20230212162238-programming_languages")) . -160) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (#("-" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) org-category "20230212162238-programming_languages")) . -161) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("l" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) org-category "20230212162238-programming_languages")) . -162) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) org-category "20230212162238-programming_languages")) . -163) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) org-category "20230212162238-programming_languages")) . -164) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#("p" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) org-category "20230212162238-programming_languages")) . -165) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) 166 (t 25577 23610 264177 673000)) nil (25577 23914 499339 543000) 0 nil])
nil
