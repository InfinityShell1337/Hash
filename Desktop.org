#+TITLE: Emacs Desktop Enviroment
#+PROPERTY: header-args:emacs-lisp :tangle ./desktop.el

* Window Managment
** EXWM
#+begin_src emacs-lisp

  (defun hash/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))

  (defun hash/run-in-background (command)
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

  (defun hash/exwm-update-title ()
    (pcase exwm-class-name
      ("firefox" (exwm-workspace-rename-buffer (format "Firefox: %s" exwm-title)))
      ))

  (defun hash/configure-window-by-class ()
    (interactive)
    (message "*%s*" exwm-class-name)

    ;; Send windows to workspaces on creation
    (pcase exwm-class-name
      ("firefox" (exwm-workspace-move-window 2))
      )
    )

  (defun hash/set-wallpaper ()
    (interactive)
    (hash/run-in-background "feh --bg-scale /usr/share/backgrounds/mountain.jpg")
    )

  (defun hash/exwm-init-hook ()
    ;; Make workspace 1 the default
    (exwm-workspace-switch-create 1)

    ;; Open eshell by default
    ;;(eshell)

    ;; Start polybar
    (hash/start-panel)

    ;; Launch apps that will run in the background
    (hash/run-in-background "nm-applet")
    (hash/run-in-background "pasystray")

    ;; modeline extra
    ;;(display-battery-mode 1)
    )

  (use-package exwm
    :config
    ;; Set the default number of workspaces
    (setq exwm-workspace-number 5)

    ;; When window "class" updates, use it to set the buffer name
    (add-hook 'exwm-update-class-hook #'hash/exwm-update-class)

    ;; When window title updates, use it to set the buffer name
    (add-hook 'exwm-update-title-hook #'hash/exwm-update-title)

    ;; Configure Windows when they are created
    (add-hook 'exwm-manage-finish-hook #'hash/configure-window-by-class)

    ;; When EXWM starts up, do some extra configuration
    (add-hook 'exwm-init-hook #'hash/exwm-init-hook)

    ;; Automatically move EXWM buffer to current workspace when selected
    (setq exwm-layout-show-all-buffers t)

    ;; Change minibuffer position
    ;;(setq exwm-workspace-minibuffer-position 'top)

    ;; Turn on auto focus
    (setq mouse-autoselect-window t
          focus-follows-mouse t)

    ;; These keys should always pass through to Emacs
    (setq exwm-input-prefix-keys
      '(?\C-x
        ?\C-u
        ?\C-h
        ?\M-x
        ?\M-`
        ?\M-&
        ?\M-:
        ?\C-\M-j  ;; Buffer list
        ?\C-\ ))  ;; Ctrl+Space

    ;; Ctrl+Q will enable the next key to be sent directly
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    ;; Set up global key bindings.  These always work, no matter the input state!
    ;; Keep in mind that changing this list after EXWM initializes has no effect.
    (setq exwm-input-global-keys
          `(
            ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
            ([?\s-r] . exwm-reset)

            ;; Move between windows
            ([s-left] . windmove-left)
            ([s-right] . windmove-right)
            ([s-up] . windmove-up)
            ([s-down] . windmove-down)

            ;; Launch applications via shell command
            ([?\s-&] . (lambda (command)
                         (interactive (list (read-shell-command "$ ")))
                         (start-process-shell-command command nil command)))

            ;; Switch workspace
            ([?\s-w] . exwm-workspace-switch)
            ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

            ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
            ,@(mapcar (lambda (i)
                        `(,(kbd (format "s-%d" i)) .
                          (lambda ()
                            (interactive)
                            (exwm-workspace-switch-create ,i))))
                      (number-sequence 0 9))))

    (exwm-input-set-key (kbd "s-a") 'counsel-linux-app)
    (exwm-input-set-key (kbd "s-f") 'exwm-layout-toggle-fullscreen)
    (exwm-input-set-key (kbd "s-<return>") 'eshell)
    (exwm-input-set-key (kbd "s-e") 'exwm-floating-toggle-floating)
    (exwm-input-set-key (kbd "s-j") 'exwm-workspace-switch-to-buffer)

    ;; System tray
    ;;(require 'exwm-systemtray)
    ;;(setq exwm-systemtray-height 16)
    ;;(exwm-systemtray-enable)

    ;; Set Wallpaper
    (hash/set-wallpaper)

    (exwm-enable))
#+end_src

** desktop-environment package
#+begin_src emacs-lisp
  (use-package desktop-environment
    :after exwm
    :config (desktop-environment-mode)
    :custom
    (desktop-environment-brightness-small-increment "2%+")
    (desktop-environment-brightness-small-decrement "2%-")
    (desktop-environment-brightness-normal-increment "5%+")
    (desktop-environment-brightness-normal-decrement "5%-")
    )
#+end_src
* Desktop Environment
** Launcher Script
#+begin_src shell :tangle ./Start-Emacs.sh :mkdirp yes

  # Start Programs
  picom -fb &

  # Start Emacs
  exec dbus-launch --exit-with-session emacs -mm --debug-init -l ~/.emacs.d/desktop.el

#+end_src
** Desktop File
#+begin_src conf :tangle ./exwm/EXWM.desktop :mkdirp yes
[Desktop Entry]
Name=EXWM
Comment=Emacs X Window Manager
Exec=sh /home/arch/.emacs.d/Start-Emacs.sh
Type=Application
#+end_src

** Polybar
#+begin_src emacs-lisp

    ;; Start the emacs server
    (server-start)

    (defvar hash/polybar-process nil
      "Holds the process of the running Polybar instance, if any")

    (defun hash/kill-panel ()
      (interactive)
      (when hash/polybar-process
        (ignore-errors
          (kill-process hash/polybar-process)))
      (setq hash/polybar-process nil))

    (defun hash/start-panel ()
      (interactive)
      (hash/kill-panel)
      (setq hash/polybar-process (start-process-shell-command "polybar" nil "polybar exwm-panel")))

  (defun hash/send-polybar-hook (module-name hook-index)
    (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

  (defun hash/send-polybar-exwm-workspace ()
    (hash/send-polybar-hook "exwm-workspace" 1))

  ;; Update panel indicator when workspace changes
  (add-hook 'exwm-workspace-switch-hook #'hash/send-polybar-exwm-workspace)

#+end_src

#+begin_src conf :tangle ~/.config/polybar/config.ini :mkdirp yes
; Docs: https://github.com/polybar/polybar
;==========================================================

[settings]
screenchange-reload = true

[global/wm]
margin-top = 0
margin-bottom = 0

[colors]
background = #f0232635
background-alt = #576075
foreground = #A6Accd
foreground-alt = #555
primary = #ffb52a
secondary = #e60053
alert = #bd2c40
underline-1 = #c792ea

[bar/exwm-panel]
width = 100%
height = 35
offset-x = 0
offset-y = 0
fixed-center = true
enable-ipc = true

background = ${colors.background}
foreground = ${colors.foreground}

line-size = 2
line-color = #f00

border-size = 0
border-color = #00000000

padding-top = 5
padding-left = 1
padding-right = 1

module-margin = 1

font-0 = "Cantarell:size=9:weight=bold;2"
font-1 = "Font Awesome:size=7;2"
font-2 = "Material Icons:size=10;5"
font-3 = "Fira Mono:size=7;-3"

modules-left = exwm-workspace
modules-right = cpu temperature battery date

tray-position = right
tray-padding = 2
tray-maxsize = 28

cursor-click = pointer
cursor-scroll = ns-resize

[module/exwm-workspace]
type = custom/ipc
hook-0 = emacsclient -e "exwm-workspace-current-index" | sed -e 's/^"//' -e 's/"$//'
initial = 1
format-underline = ${colors.underline-1}
format-padding = 1

[module/cpu]
type = internal/cpu
interval = 2
format = <label> <ramp-coreload>
format-underline = ${colors.underline-1}
click-left = emacsclient -e "(proced)"
label = %percentage:2%%
ramp-coreload-spacing = 0
ramp-coreload-0 = ▁
ramp-coreload-0-foreground = ${colors.foreground-alt}
ramp-coreload-1 = ▂
ramp-coreload-2 = ▃
ramp-coreload-3 = ▄
ramp-coreload-4 = ▅
ramp-coreload-5 = ▆
ramp-coreload-6 = ▇

[module/date]
type = internal/date
interval = 5

date = "%a %b %e"
date-alt = "%A %B %d %Y"

time = %l:%M %p
time-alt = %H:%M:%S

format-prefix-foreground = ${colors.foreground-alt}
format-underline = ${colors.underline-1}

label = %date% %time%

[module/battery]
type = internal/battery
battery = BAT0
adapter = ADP1
full-at = 98
time-format = %-l:%M

label-charging = %percentage%% / %time%
format-charging = <animation-charging> <label-charging>
format-charging-underline = ${colors.underline-1}

label-discharging = %percentage%% / %time%
format-discharging = <ramp-capacity> <label-discharging>
format-discharging-underline = ${self.format-charging-underline}

format-full = <ramp-capacity> <label-full>
format-full-underline = ${self.format-charging-underline}

ramp-capacity-0 = 
ramp-capacity-1 = 
ramp-capacity-2 = 
ramp-capacity-3 = 
ramp-capacity-4 = 

animation-charging-0 = 
animation-charging-1 = 
animation-charging-2 = 
animation-charging-3 = 
animation-charging-4 = 
animation-charging-framerate = 750

[module/temperature]
type = internal/temperature
thermal-zone = 0
warn-temperature = 60

format = <label>
format-underline = ${colors.underline-1}
format-warn = <label-warn>
format-warn-underline = ${self.format-underline}

label = %temperature-c%
label-warn = %temperature-c%!
label-warn-foreground = ${colors.secondary}
#+end_src

