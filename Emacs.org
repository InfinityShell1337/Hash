#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Default Setup
#+begin_src emacs-lisp

  (setq inhibit-startup-message t) ; Remove start page

  (scroll-bar-mode -1) ; Disable visible scrollbar
  (tool-bar-mode -1) ; Disable toolbar
  (tooltip-mode -1) ; Disable tooltips
  (set-fringe-mode 10) ; Give some breathing room

  (menu-bar-mode -1) ; Disable the menu bar

  (setq visible-bell t) ; Visible bell

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit) ; Make ESC quit prompts

#+end_src
* Initialize Packages
** Init Packages
#+begin_src emacs-lisp

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

#+end_src
** Initialize use-package on non-Linux platforms
#+begin_src emacs-lisp

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

#+end_src
* Keep folders clean
#+begin_src emacs-lisp
  (use-package no-littering)
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src
* Line numbers
#+begin_src emacs-lisp

(column-number-mode)
(global-display-line-numbers-mode t)

; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src
* doom-themes
#+begin_src emacs-lisp

(use-package doom-themes)

#+end_src
* Auto Update Packages
#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "22:00"))
#+end_src
* all-the-icons
#+begin_src emacs-lisp

(use-package all-the-icons)

#+end_src
* term
#+begin_src emacs-lisp
(use-package term)
#+end_src
* eshell
** Main
#+begin_src emacs-lisp

  (defun hash/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell
    :hook (eshell-first-time-mode . hash/configure-eshell))

  (use-package eshell-did-you-mean)

  (use-package esh-help)

  (use-package eshell-z)

  (use-package eshell-up)

#+end_src
** Better prompt
#+begin_src emacs-lisp

    ;; (use-package eshell-git-prompt
    ;;   :config
    ;;   (eshell-git-prompt-use-theme 'robbyrussell))

    ;; (use-package eshell-prompt-extras
    ;;   :after eshell
    ;;   :config
    ;;   (autoload 'epe-theme-lambda "eshell-prompt-extras")
    ;;   (setq eshell-highlight-prompt nil
    ;;         eshell-prompt-function 'epe-theme-lambda))

  (setq eshell-prompt-function
        (lambda ()
          (concat
           (propertize (user-login-name) 'face `(:foreground "red"))
           (propertize "@" 'face `(:foreground "green"))
           (propertize (system-name) 'face `(:foreground "blue"))
           (propertize " " 'face `(:foreground "green"))
           (propertize (concat (eshell/pwd)) 'face `(:foreground "black"))
           (propertize " λ" 'face `(:foreground "purple"))
           (propertize " " 'face `(:foreground "white"))
           )))

  (setq eshell-prompt-regexp "^[^#$\n!%&*()]* [^#$\n!%&*()]* λ ")

#+end_src
* Ivy for completions
#+begin_src emacs-lisp

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

#+end_src
* Counsel for cool stuff
#+begin_src emacs-lisp

(use-package counsel
  :bind (:map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)
	 ("M-x" . 'counsel-M-x)
	 ("C-x b" . 'counsel-switch-buffer)
	 ("C-x C-f" . 'counsel-find-file))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config (counsel-mode 1)
	  (setq ivy-initial-inputs-alist nil) ; Don't start searches with ^
	  )

#+end_src
* ivy-rich
#+begin_src emacs-lisp

(use-package ivy-rich
  :after ivy
  :init (ivy-rich-mode 1))

#+end_src
* rainbow-delimiters
#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src
* doom-modeline
#+begin_src emacs-lisp

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 30)))

#+end_src
* helpful
#+begin_src emacs-lisp

(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src
* General
** Main
#+begin_src emacs-lisp

(use-package general
  :config (general-evil-setup t))

(general-create-definer hash/leader-keys
  :keymaps '(normal insert visual emacs)
  :prefix "SPC"
  :global-prefix "C-SPC")

#+end_src
** general keybindings
#+begin_src emacs-lisp

  (general-define-key
   "C-M-j" 'counsel-switch-buffer
   "C-x b" 'counsel-switch-buffer
   "C-M-<tab>" 'eval-expression
   "RET" 'evil-open-below
   )

#+end_src
* Which key
#+begin_src emacs-lisp

(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 1))

#+end_src
* Evil
** Main
#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)

    (evil-set-undo-system 'undo-redo)
    )

#+end_src
** Evil collection for better evil
#+begin_src emacs-lisp

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

#+end_src
** evil commenting
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines)
    )
#+end_src
* hydra
#+begin_src emacs-lisp

(use-package hydra
  :defer t)

#+end_src
* dired
** Main
#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :custom ((dired-listing-switches "-agho --group-directories-first"))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer
    ))
#+end_src
** dired-single
#+begin_src emacs-lisp
(use-package dired-single)
#+end_src
** File icons
#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode)
  )
#+end_src
* projectile
** Main
#+begin_src emacs-lisp

(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~")
    (setq projectile-project-search-path '("~")))
  (setq projectile-switch-project-action #'projectile-dired))

#+end_src
** counsel-projectile (better ivy integration with projectile)
#+begin_src emacs-lisp

(use-package counsel-projectile
  :config (counsel-projectile-mode))

#+end_src
* magit
** Main
#+begin_src emacs-lisp

(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src
** forge (extra for magit)
#+begin_src emacs-lisp

(use-package forge)

#+end_src
* Org
** Main
#+begin_src emacs-lisp

(use-package org
  :hook (org-mode . hash/org-mode-setup)
  :config
  (setq org-ellipsis " ▾"
	org-hide-emphasis-markers nil))

#+end_src
** org-bullets
#+begin_src emacs-lisp

(use-package org-bullets
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src
** Make org buffers in middle of screen
#+begin_src emacs-lisp

(use-package visual-fill-column
  :defer t
  :hook (org-mode . hash/org-mode-visual-fill))

(defun hash/org-mode-visual-fill ()
  (setq visual-fill-column-width 150
	visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

#+end_src
** Org templates
#+begin_src emacs-lisp

(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("js" . "src javascript"))

#+end_src
** Disable backup files
#+begin_src emacs-lisp

  (setq make-backup-files nil)

#+end_src
** Auto-tangle Configuration files
#+begin_src emacs-lisp
  (defun hash/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                         (expand-file-name "~/.emacs.d/"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'hash/org-babel-tangle-config)))
#+end_src
** Org Setup
#+begin_src emacs-lisp

(defun hash/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (auto-fill-mode 0)
  (visual-line-mode 1)
  (setq evil-auto-indent nil))

#+end_src
** Org look nice
#+begin_src emacs-lisp

(require 'org-indent)
(font-lock-add-keywords 'org-mode
			'(("^ *\\([-]\\) "
			   (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

(dolist (face '((org-level-1 . 1.2)
		(org-level-2 . 1.1)
                (org-level-3 . 1.05)
                (org-level-4 . 1.0)
                (org-level-5 . 1.1)
                (org-level-6 . 1.1)
                (org-level-7 . 1.1)
                (org-level-8 . 1.1)))
  (set-face-attribute (car face) nil :weight 'regular :height (cdr face)))

#+end_src
** Org present
#+begin_src emacs-lisp

  (defun hash/org-present-prepare-slide (buffer-name heading)
    ;; Hide cursor
    (org-present-hide-cursor)
    )

  (use-package org-present
    :init
    (add-hook 'org-present-after-navigate-functions 'hash/org-present-prepare-slide)
    )

#+end_src
* Language Server Protocol
** Header Breadcrumb
#+begin_src emacs-lisp
  (defun hash/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode)
    )
#+end_src
** Main
#+begin_src emacs-lisp

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . hash/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t)
   )

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    )

  (use-package lsp-treemacs
    :after lsp
    )

  (use-package lsp-ivy)

#+end_src
** Company mode
#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind
    (:map company-active-map
          ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    )

  (use-package company-box
    :hook (company-mode . company-box-mode)
    )

#+end_src
* Treemacs
#+begin_src emacs-lisp
  (use-package treemacs)
#+end_src
* undo tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :init
    (global-undo-tree-mode)

    :custom
    (undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
    )
#+end_src
* Emojis!
#+begin_src emacs-lisp
  (use-package emojify
    :init
    (add-hook 'after-init-hook #'global-emojify-mode)
    )
#+end_src
* Keybindings
#+begin_src emacs-lisp

  (hash/leader-keys
   "c" '(:ignore t :which-key "config")
   "ct" '(counsel-load-theme :which-key "theme")

   "r" '(:ignore t :which-key "run")
  "re" '(ielm :which-key "elisp-shell")
  "rt" '(ansi-term :which-key "term")

   "b" '(:ignore t :which-key "buffer")
   "bb" '(counsel-switch-buffer :which-key "switch")
   "bk" '(kill-buffer :which-key "kill")

   "o" '(:ignore t :which-key "org")
   "op" '(org-present :which-key "present")
   "ot" '(org-babel-tangle :which-key "tangle")

   "." '(counsel-find-file :which-key "file")
   "," '(counsel-switch-buffer :which-key "buffer")
   "/" '(counsel-M-x :which-key "M-x")
   "SPC" '(eshell :which-key "eshell")
   )

#+end_src
* Theme
#+begin_src emacs-lisp

  ;(load-theme 'doom-Iosvkem t)
  ;(load-theme 'doom-horizon t)
  ;(load-theme 'doom-outrun-electric t)
  (load-theme 'doom-dracula t)
  ;(load-theme 'doom-palenight t)
  ;(load-theme 'doom-challenger-deep t)

#+end_src
* Transparency
#+begin_src emacs-lisp

    (set-frame-parameter (selected-frame) 'alpha '(80 . 90))
    (add-to-list 'default-frame-alist '(alpha . (80 . 90)))
    (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
    (add-to-list 'default-frame-alist '(fullscreen . maximized))

#+end_src
